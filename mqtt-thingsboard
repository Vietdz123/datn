import json
from paho.mqtt import client as mqtt_client

import paho.mqtt.client as paho  		    #mqtt library
import os
import json
import time
from datetime import datetime
from threading import Thread
import threading

broker="127.0.0.1"   			    #host name
port=1883 					    #data listening port
ACCESS_TOKEN1 ='ufgVcklJD3yoKTWSBoa9'    #Smart-lighting -VietPro
ACCESS_TOKEN2 ='8rQoOpUxcBmUVkkZaVOb'   # viet 
ACCESS_TOKEN3= 'VPsng4Dk3KXh0NTKwhVt'  
TELEMETRY = "v1/devices/me/telemetry"
ATTRIBUTE = "v1/devices/me/attributes"
topic = "v1/devices/me/rpc/request/+"

def check_state(fullstring: str, substring: str) :
    if fullstring.find(substring) != -1:
        payload_telemetry =  {"STATE": "ON"}
        payload_telemetry = json.dumps(payload_telemetry)       # return string
        return payload_telemetry
    else:
        payload_telemetry =  {"STATE": "OFF"}
        payload_telemetry = json.dumps(payload_telemetry)       # return string
        return payload_telemetry    

def connect_mqtt(TOKEN: str) -> mqtt_client:
    client = mqtt_client.Client()  
    client.username_pw_set(TOKEN)
    client.connect(broker,port,keepalive=60)
    return client

def init_responce() :
    payload = "{}"
    return payload

def add_json(key , value, responce: str):
    json_responce = json.loads(responce)
    json_responce[key] = value
    payload = json.dumps(json_responce)
    # payload = payload.replace("\"true\"", "true")
    # payload = payload.replace("\"false\"", "false")
    return payload

def subscribe(client: mqtt_client):
    def on_message(client, userdata, msg):
        print(f"Received `{msg.payload.decode()}` from `{msg.topic}` topic")
        y = json.loads(msg.payload.decode())                        #convert sang json
        z = json.dumps(y)                                           #convert to string
        repsonTopic = str(msg.topic)
        responce =  repsonTopic.replace("request", "response")

        if z.count('pin') != 0 :           
            payload = init_responce()
            payload = add_json(y["params"]["pin"], y["params"]["enabled"], payload)
            print("PARSE SUCCESSFULLY..................")
            payload_telemetry = check_state(payload, "true")        #return JSON
            print(payload_telemetry)
            client.publish("v1/devices/me/attributes", payload)
            client.publish(TELEMETRY, payload_telemetry)
            client.publish(responce, payload)

        else :
            payload = init_responce()
            payload = add_json(1, "false", payload)
            payload = add_json(2, "false", payload)
            client.subscribe(topic)
            #client.publish(ATTRIBUTE, payload)
            client.publish(responce, payload)

    print("CALLBACK>>>>>>>>>>>>>>>>>>>>>>>>")
    payload = init_responce()
    payload = add_json(1, "true", payload)
    payload = add_json(2, "true", payload)
    client.on_message = on_message
    client.subscribe(topic)
    client.publish("v1/devices/me/attributes", payload)
    
def run(client: mqtt_client) :
    client.loop_forever()

if __name__ == '__main__':
    client = connect_mqtt(ACCESS_TOKEN1)
    client1 = connect_mqtt(ACCESS_TOKEN2)
    client2 = connect_mqtt(ACCESS_TOKEN3)
    subscribe(client)
    subscribe(client1)
    subscribe(client2)
    t1 = threading.Thread(target=run, args=(client,))
    t2 = threading.Thread(target=run, args=(client1,))
    t3 = threading.Thread(target=run, args=(client2,))
    t1.start()
    t2.start()
    t3.start()
    # t1.join()
    # t2.join()
    # t3.join()
